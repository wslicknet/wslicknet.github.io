[{"title":"javascript编程小技巧","date":"2017-01-13T03:47:07.000Z","path":"2017/01/13/javascript编程小技巧/","text":"其实主要是性能小技巧。 循环优化循环体是执行最多的，所以要确保其被最大限度的优化. 123456789101112131415// 提前计算好终止条件，存到局部变量中for(var i=0, j = document.getElementsByTagName('a').length; i&lt;l; i++)&#123; // maybe faster&#125;//推荐 while循环的效率要优于for(;;)var i=document.getElementsByTagName('a').length;while(i--)&#123; &#125;// 据说是最快的 后测试循环do&#123; // maybe fastest&#125;while(i--) 避免 for-in 循环for(in)的效率极差，因为它需要查询散列键，只要可以，就应该尽量少用123456//要遍历一个集合内的元素，用for,while,do..while代替//这是vue源码中的一段，作者用for(;;)循环代替了for...invar keys = Object.keys(obj); for (var i = 0, l = keys.length; i &lt; l; i++) &#123; this.convert(keys[i], obj[keys[i]]); &#125; 多个类型一起声明123456789var option='option';var event='event';var method='method';//可替换为 var option='option', event='event', method='method'; 类型转换1234567+'010' === 10; //+可以把字符串变成整数Number('010') === 10;parseInt('010', 10) === 10;10 + '' === '10';//也可以把整数变成字符串+new Date() // timestamp+new Date; 使用三目运算符替代条件分支12345678//将条件从最可能到最不可能进行排列,减少探测次数 if (a &gt; b) &#123; num = a;&#125; else &#123; num = b;&#125;//可以替换为：num = a &gt; b ? a : b; 巧用||和&amp;&amp;布尔运算符123//源码中这种运算符操作很多，尤其是jQuery源码item &amp;&amp; item.$value || item;var id = typeof asset === 'function' ? asset.options &amp;&amp; asset.options.name || asset.id : asset.name || asset.id; 用局部变量代替全局变量无论是DOM节点，普通变量，还是对象属性，若需重复使用，通通存成局部变量，避免多次取值的调用开销12345678910 //vue源码var p = Cache.prototype;p.put = function (key, value) &#123;&#125;//jquery源码var deletedIds = [];var slice = deletedIds.slice;var concat = deletedIds.concat;var push = deletedIds.push;var indexOf = deletedIds.indexOf; DOM节点链式操作12//链式操作会自动缓存$('.test').find('.btn').css('backgroundColor','#f30').click(); 修改CSS类，而不是样式1尤其是在修改多个样式时，修改css类只会引起一次回流，而修改样式会引起多次回流。 插入迭代器12345var name=values[i]; i++;//替换为var name=values[i++] 使用字面量123456789101112var aTest = new Array(); var aTest = new Object; var reg = new RegExp(); var oFruit = new O;oFruit.color = \"red\";oFruit.name = \"apple\";//分别替换为var aTest = []; var aTest = &#123;&#125;; var reg = /\\d/i; //只在有变量时才用new RegExp()var oFruit = &#123; color: \"red\", name: \"apple\" &#125;; 使用一次innerHTML赋值代替构建dom元素12345678910111213var frag = document.createDocumentFragment();for (var i = 0; i &lt; 1000; i++) &#123; var el = document.createElement('p'); el.innerHTML = i; frag.appendChild(el);&#125;document.body.appendChild(frag);//可以替换为：var html = [];for (var i = 0; i &lt; 1000; i++) &#123; html.push('&lt;p&gt;' + i + '&lt;/p&gt;');&#125;document.body.innerHTML = html.join(''); 尽量使用原生方法12var container = document.createElement('div');container.appendChild(el.cloneNode(true)); 避免with语句with语句会创建自己的作用域，因此会增加其中执行的代码的作用域链的长度，所以能不用的时候就不要用。12345678with (a.b.c.d) &#123; property1 = 1; property2 = 2;&#125;//可以替换为：var obj = a.b.c.d;obj.property1 = 1;obj.property2 = 2; ps:有些代码性能虽高，但是可能会降低阅读性与可维护性，或者与团队的规范冲突，所以这个需要自己在可读性，团队规范性与代码性能之间权衡。 感言上面罗列的都是我觉得经常会用到的，看一遍，用心记一下，很easy～～可能以后会不定时更新，看自己get到的情况～～ 我也是最近才注意到这些“潜规则”，正巧最近也在看vue的源码，然后就发现:基本上网上能查到的性能优化的方面，或者编程的技巧都能在vue源码中找到佐证。vue源码的代码质量很高，非常值得我等小辈学习。 上面的技巧，若有任何不对，欢迎指正，也欢迎补充～～ 过段时间一定要写源码阅读笔记（好怕打脸～～逃）","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"hexo+github入门教程","date":"2016-12-29T03:00:35.000Z","path":"2016/12/29/hexo-github入门教程/","text":"本文是以Mac为例。入门级教程，适合小白～～ 安装前准备1.node.js安装 2.git安装 （因为我们最终要把代码提交到github上） 3.一个github账号 4.一个与GitHub账号同名的GitHub仓库：xxx.github.io xxx是GitHub账号名 安装预览安装过程遇到问题，可以先往下面看坑，有没有解决你的疑问。 1.新建一个文件夹，用来放博客的相关文件，相当于博客的根目录，例如：／blog 2.进入blog文件夹：cd ~/blog 3.全局安装hexo：sudo npm install -g hexo 4.初始化hexo：hexo init 5.生成静态页面：hexo generate (简写：hexo g) [遇到问题，看下面的坑] 6.启动本地服务：hexo server(简写：hexo s) 7.预览：浏览器输入：http://localhost:4000 [不能显示，看下面的坑] 到这里，就已经安装完成了。 部署到github1.指定要提交的github仓库的地址：打开blog目录下的_config.yml，找到最下面的deploy设置，改成： 1234deploy: type: git repo: git@github.com:wslicknet/wslicknet.github.io.git branch: master type: 与git中间有一个空格，这是YAML的语法，必须有一个空格，否则会出错。 repo：的值是GitHub仓库地址，可以用https协议，也可以用ssh协议。 2.安装hexo-deployer-git : npm install hexo-deployer-git –save 3.将本地hexo文件部署到GitHub：hexo deploy (简写：hexo d) 4.在浏览器中输入：http://wslicknet.github.io/. 查看。 wslicknet是你自己的GitHub账户名。 更改主题1.hexo主题列表：https://github.com/hexojs/hexo/wiki/Themes 2.选择自己喜欢的主题：$ git clone &lt;repository&gt; themes/&lt;theme-name&gt;一般github上每个主题都有安装和使用说明。clone后的主题文件在blog/themes/ 文件夹下. 3.更改blog/_config.yml文件中的theme值，例如：theme: yilia 4.除了更改主题，还可以更改#site中的值，你自己网站的title subtitle author email 等都可以更改。 5.和主题相关的配置，一般是在每个主题的配置文件中，例如：blog/theme/yilia/_config.yml 可根据需要修改。 更改完配置后，依然是hexo g hexo d 新建文章1.hexo new “文章名称”，文章在blog/source/_posts目录下，直接编辑md文件即可。 坑1.部分操作需要root权限，如果遇到因为权限被拒绝的错误，请用sudo命令试下。 2.hexo g hexo d 等执行hexo命令，报错： 1Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos; 可忽略，hexo并没有用到这个功能，如果强迫症，可以自行百度解决方法。 3.本地预览时，打不开页面，报错：找不到localhost 。2.6以后的hexo版本，需要手动配置些东西，执行下面3行代码试下： 12345npm install hexo-renderer-ejs --savenpm install hexo-renderer-stylus --savenpm install hexo-renderer-marked --save 执行完后再重复安装步骤的5，6，7. 4.如果更换主题时，遇到问题，可在GitHub上主题项目的issue里寻找解决方法。一般，你遇到的别人都已经遇到过了。 会随着使用的深入不断更新～～～","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"Hello World","date":"2016-12-27T05:44:12.000Z","path":"2016/12/27/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]}]